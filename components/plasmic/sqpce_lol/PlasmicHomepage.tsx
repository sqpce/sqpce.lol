// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: r7bQFXtqbEtVEZD5aJhcPv
// Component: A-edtCi8NNz_

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_sqpce_lol.module.css"; // plasmic-import: r7bQFXtqbEtVEZD5aJhcPv/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: A-edtCi8NNz_/css

import RobloxIcon from "./icons/PlasmicIcon__Roblox"; // plasmic-import: ULQPYRHlfctn/icon
import DiscordIcon from "./icons/PlasmicIcon__Discord"; // plasmic-import: 1npxSAYOE0SJ/icon
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: HCyFNv4kV7hg/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  home?: p.Flex<"div">;
  helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium?: p.Flex<"div">;
  sqpce?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames(projectcss.all, sty.home)}
          >
            <div
              data-plasmic-name={
                "helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium"
              }
              data-plasmic-override={
                overrides.helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium
              }
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium
              )}
            >
              {
                "Hello! I am sqpce, a hardly working 3d modeler based in Belgium. "
              }
            </div>
            <div
              data-plasmic-name={"sqpce"}
              data-plasmic-override={overrides.sqpce}
              className={classNames(projectcss.all, sty.sqpce)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"sqpce"}
              </div>
            </div>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yAdKw,
                ``
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["goToWorks"] = true
                  ? (() => {
                      const actionArgs = { destination: `/new-page` };
                      return (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["goToWorks"] === "object" &&
                  typeof $steps["goToWorks"].then === "function"
                ) {
                  $steps["goToWorks"] = await $steps["goToWorks"];
                }
              }}
              platform={"nextjs"}
            >
              {"Works"}
            </p.PlasmicLink>
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__bxUgY
              )}
              component={Link}
              onClick={async event => {
                const $steps = {};
                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await $steps["goToHomepage"];
                }
              }}
              platform={"nextjs"}
            >
              {"Home"}
            </p.PlasmicLink>
            <RobloxIcon
              className={classNames(projectcss.all, sty.svg__vB0Id)}
              onClick={async event => {
                const $steps = {};
                $steps["goToHttpswwwrobloxcomusers147843940Profile"] = true
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://www.roblox.com/users/147843940/profile"
                      };
                      return (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps[
                    "goToHttpswwwrobloxcomusers147843940Profile"
                  ] === "object" &&
                  typeof $steps["goToHttpswwwrobloxcomusers147843940Profile"]
                    .then === "function"
                ) {
                  $steps["goToHttpswwwrobloxcomusers147843940Profile"] =
                    await $steps["goToHttpswwwrobloxcomusers147843940Profile"];
                }
              }}
              role={"img"}
            />

            <DiscordIcon
              className={classNames(projectcss.all, sty.svg__lL0ED)}
              onClick={async event => {
                const $steps = {};
                $steps["goToHttpsdiscordcomusers731572168454045777"] = true
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://discord.com/users/731572168454045777"
                      };
                      return (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps[
                    "goToHttpsdiscordcomusers731572168454045777"
                  ] === "object" &&
                  typeof $steps["goToHttpsdiscordcomusers731572168454045777"]
                    .then === "function"
                ) {
                  $steps["goToHttpsdiscordcomusers731572168454045777"] =
                    await $steps["goToHttpsdiscordcomusers731572168454045777"];
                }
              }}
              role={"img"}
            />

            <TwitterIcon
              className={classNames(projectcss.all, sty.svg__u77K4)}
              onClick={async event => {
                const $steps = {};
                $steps["goToHttpstwittercomsqpce"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: "https://twitter.com/sqpce"
                      };
                      return (({ destination }) => {
                        __nextRouter?.push(destination);
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  typeof $steps["goToHttpstwittercomsqpce"] === "object" &&
                  typeof $steps["goToHttpstwittercomsqpce"].then === "function"
                ) {
                  $steps["goToHttpstwittercomsqpce"] = await $steps[
                    "goToHttpstwittercomsqpce"
                  ];
                }
              }}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "home",
    "helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium",
    "sqpce",
    "text"
  ],
  home: [
    "home",
    "helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium",
    "sqpce",
    "text"
  ],
  helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium: [
    "helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium"
  ],
  sqpce: ["sqpce", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  home: "div";
  helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium: "div";
  sqpce: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium: makeNodeComponent(
      "helloIAmSqpceAHardlyWorking3DModelerBasedInBelgium"
    ),
    sqpce: makeNodeComponent("sqpce"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
